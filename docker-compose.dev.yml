version: "3.9"

services:
  nginx:
    restart: always
    container_name: "nginx_dev"
    image: nginx
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
      - react
      - postgresql

  react:
    container_name: "react_dev"
    restart: on-failure
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    env_file:
      - ./environment/react.dev.env
    volumes:
      - "./frontend:/code"
      - "./frontend/node_modules:/code/node_modules"

  django:
    restart: always
    container_name: "django_dev"
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    env_file:
      - ./environment/django.dev.env
    volumes:
      - "./backend:/code"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8000/api/readiness"
        ]
      interval: 120s
      timeout: 5s
      retries: 5
    depends_on:
      postgresql:
        condition: service_healthy

  worker_default:
    container_name: "worker_default"
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.worker.default
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    env_file:
      - ./environment/worker.dev.env
      - ./environment/django.dev.env
    volumes:
      - "./backend:/code"

  worker_payments:
    container_name: "worker_payments"
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.worker.payments
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    env_file:
      - ./environment/worker.dev.env
      - ./environment/django.dev.env
    volumes:
      - "./backend:/code"

  worker_labels:
    container_name: "worker_labels"
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.worker.labels
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    env_file:
      - ./environment/worker.dev.env
      - ./environment/django.dev.env
    volumes:
      - "./backend:/code"

  worker_amazon:
    container_name: "worker_amazon"
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.worker.amazon
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    env_file:
      - ./environment/worker.dev.env
      - ./environment/django.dev.env
    volumes:
      - "./backend:/code"

  postgresql:
    container_name: "postgresql_dev"
    restart: on-failure
    image: postgres:13.4-alpine
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    # restart: always
    env_file:
      - ./environment/postgresql.dev.env
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U SKUdrop" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: 'redis:latest'
    command: redis-server --requirepass eHKsccrR5YL6jvp3CCag8rea
    restart: always
    container_name: redis_dev
    env_file:
      - ./environment/django.dev.env
    ports:
      - "6379:6379"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: "node-exporter"
    ports:
      - "9100:9100"

  prometheus:
    image: prom/prometheus:latest
    container_name: "prometheus"
    user: 'root'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.route-prefix=/'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_db:/var/lib/prometheus
      - ./prometheus/prometheus_db:/prometheus
      - ./prometheus/prometheus_db:/etc/prometheus
      - ./prometheus/alert.rules:/etc/prometheus/alert.rules
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        mode: "non-blocking"
    ports:
      - "9090:9090"

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yaml

  loki:
    image: grafana/loki:latest
    # volumes:
    #   - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
    #   - /tmp/boltdb:/tmp/boltdb
    #   - /tmp/chunks:/tmp/chunks
    ports:
      - 3100:3100
    command: 
      -config.file=/etc/loki/local-config.yaml
      -config.expand-env=true

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6

  grafana:
    image: grafana/grafana:latest
    container_name: "grafana"
    env_file:
      - ./environment/grafana.dev.env
    volumes:
      - ./grafana/grafana_db:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    depends_on:
      - prometheus
    ports:
      - "3030:3000"
    user: '0'
